/*
 * Copyright (c) 2012, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <QColor>
#include <QSlider>
#include <QLabel>
#include <QGridLayout>
#include <QVBoxLayout>

#include <boost/program_options.hpp>

#include "rviz/visualization_manager.h"
#include "rviz/render_panel.h"
#include "rviz/display.h"

#include "rviz/yaml_config_reader.h"

#include "myvizh"

namespace po = boost::program_options;

// BEGIN_TUTORIAL
// Constructor for MyViz.  This does most of the work of the class.
MyViz::MyViz( QWidget* parent )
  : QWidget( parent )
{
  // Construct and lay out labels and slider controls.
  QLabel* thickness_label = new QLabel( "Line Thickness" );
  QSlider* thickness_slider = new QSlider( Qt::Horizontal );
  thickness_slider->setMinimum( 1 );
  thickness_slider->setMaximum( 100 );
  QLabel* cell_size_label = new QLabel( "Cell Size" );
  QSlider* cell_size_slider = new QSlider( Qt::Horizontal );
  cell_size_slider->setMinimum( 1 );
  cell_size_slider->setMaximum( 100 );
  QGridLayout* controls_layout = new QGridLayout();
  controls_layout->addWidget( thickness_label, 0, 0 );
  controls_layout->addWidget( thickness_slider, 0, 1 );
  controls_layout->addWidget( cell_size_label, 1, 0 );
  controls_layout->addWidget( cell_size_slider, 1, 1 );

  // Construct and lay out render panel.
  render_panel_ = new rviz::RenderPanel();
  QVBoxLayout* main_layout = new QVBoxLayout;
  main_layout->addLayout( controls_layout );
  main_layout->addWidget( render_panel_ );

  // Set the top-level layout for this MyViz widget.
  setLayout( main_layout );

  // Make signal/slot connections.
  connect( thickness_slider, SIGNAL( valueChanged( int )), this, SLOT( setThickness( int )));
  connect( cell_size_slider, SIGNAL( valueChanged( int )), this, SLOT( setCellSize( int )));

  // Next we initialize the main RViz classes.
  //
  // The VisualizationManager is the container for Display objects,
  // holds the main Ogre scene, holds the ViewController, etc.  It is
  // very central and we will probably need one in every usage of
  // librviz.
  manager_ = new rviz::VisualizationManager( render_panel_ );
  render_panel_->initialize( manager_->getSceneManager(), manager_ );
  manager_->initialize();
  manager_->startUpdate();

  std::string actual_load_path = "/opt/codigo/JUSTINA/catkin_ws/src/planning/knowledge/hri/rviz_config.rviz";
  rviz::YamlConfigReader reader;
  rviz::Config config;
  reader.readFile(config, QString::fromStdString(actual_load_path));
  manager_->load(config.mapGetChild("Visualization Manager"));

  // Create a Grid display.
  grid_ = manager_->createDisplay( "rviz/Grid", "adjustable grid", true );
  ROS_ASSERT( grid_ != NULL );

  // Configure the GridDisplay the way we like it.
  grid_->subProp( "Line Style" )->setValue( "Billboards" );
  grid_->subProp( "Color" )->setValue( QColor( Qt::yellow ) );

  // Initialize the slider values.
  thickness_slider->setValue( 25 );
  cell_size_slider->setValue( 10 );
}

// Destructor.
MyViz::~MyViz()
{
  delete manager_;
}

bool MyViz::init(int argc, char** argv){


    #if CATCH_EXCEPTIONS
      try
      {
    #endif
        ros::init( argc, argv, "rviz", ros::init_options::AnonymousName );

        po::options_description options;
        options.add_options()
          ("help,h", "Produce this help message")
          ("splash-screen,s", po::value<std::string>(), "A custom splash-screen image to display")
          ("help-file", po::value<std::string>(), "A custom html file to show as the help screen")
          ("display-config,d", po::value<std::string>(), "A display config file (.rviz) to load")
          ("fixed-frame,f", po::value<std::string>(), "Set the fixed frame")
          ("ogre-log,l", "Enable the Ogre.log file (output in cwd) and console output.")
          ("in-mc-wrapper", "Signal that this is running inside a master-chooser wrapper")
          ("opengl", po::value<int>(), "Force OpenGL version (use '--opengl 210' for OpenGL 2.1 compatibility mode)")
          ("disable-anti-aliasing", "Prevent rviz from trying to use anti-aliasing when rendering.")
          ("no-stereo", "Disable the use of stereo rendering.")
          ("verbose,v", "Enable debug visualizations")
          ("log-level-debug", "Sets the ROS logger level to debug.");
        po::variables_map vm;
        std::string display_config, fixed_frame, splash_path, help_path;
        bool enable_ogre_log = false;
        bool in_mc_wrapper = false;
        bool verbose = false;
        int force_gl_version = 0;
        bool disable_anti_aliasing = false;
        bool disable_stereo = false;
        try
        {
          po::store( po::parse_command_line( argc, argv, options ), vm );
          po::notify( vm );

          if( vm.count( "help" ))
          {
            std::cout << "rviz command line options:\n" << options;
            return false;
          }

          if( vm.count( "in-mc-wrapper" ))
          {
            in_mc_wrapper = true;
          }

          if (vm.count("display-config"))
          {
            display_config = vm["display-config"].as<std::string>();
            if( display_config.substr( display_config.size() - 4, 4 ) == ".vcg" )
            {
              std::cerr << "ERROR: the config file '" << display_config << "' is a .vcg file, which is the old rviz config format." << std::endl;
              std::cerr << "       New config files have a .rviz extension and use YAML formatting.  The format changed" << std::endl;
              std::cerr << "       between Fuerte and Groovy.  There is not (yet) an automated conversion program." << std::endl;
              return false;
            }
          }

          if (vm.count("splash-screen"))
          {
            splash_path = vm["splash-screen"].as<std::string>();
          }

          if (vm.count("help-file"))
          {
            help_path = vm["help-file"].as<std::string>();
          }

          if (vm.count("fixed-frame"))
          {
            fixed_frame = vm["fixed-frame"].as<std::string>();
          }

          if (vm.count("ogre-log"))
          {
            enable_ogre_log = true;
          }

          if (vm.count("no-stereo"))
          {
            disable_stereo = true;
          }

          if (vm.count("opengl"))
          {
            //std::cout << vm["opengl"].as<std::string>() << std::endl;
            force_gl_version = vm["opengl"].as<int>();
          }

          if (vm.count("disable-anti-aliasing"))
          {
            disable_anti_aliasing = true;
          }

          if (vm.count("verbose"))
          {
            verbose = true;
          }

          if (vm.count("log-level-debug"))
          {
            if( ros::console::set_logger_level(ROSCONSOLE_DEFAULT_NAME, ros::console::levels::Debug) )
            {
              ros::console::notifyLoggerLevelsChanged();
            }
          }
        }
        catch (std::exception& e)
        {
          ROS_ERROR("Error parsing command line: %s", e.what());
          return false;
        }

        ros::NodeHandle private_nh("~");
        //reload_shaders_service_ = private_nh.advertiseService("reload_shaders", reloadShaders);

    #if CATCH_EXCEPTIONS
      }
      catch (std::exception& e)
      {
        ROS_ERROR("Caught exception while loading: %s", e.what());
        return false;
      }
    #endif
      return true;
}

// This function is a Qt slot connected to a QSlider's valueChanged()
// signal.  It sets the line thickness of the grid by changing the
// grid's "Line Width" property.
void MyViz::setThickness( int thickness_percent )
{
  if( grid_ != NULL )
  {
    grid_->subProp( "Line Style" )->subProp( "Line Width" )->setValue( thickness_percent / 100.0f );
  }
}

// This function is a Qt slot connected to a QSlider's valueChanged()
// signal.  It sets the cell size of the grid by changing the grid's
// "Cell Size" Property.
void MyViz::setCellSize( int cell_size_percent )
{
  if( grid_ != NULL )
  {
    grid_->subProp( "Cell Size" )->setValue( cell_size_percent / 10.0f );
  }
}
